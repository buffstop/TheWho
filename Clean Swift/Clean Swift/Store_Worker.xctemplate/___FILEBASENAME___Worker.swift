//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Buffstop Xcode Templates
//

import Foundation

protocol ___FILEBASENAMEASIDENTIFIER___WorkerStoreProtocol {
    // required functionality
    //Example:
    //func fetchEmojis(completionHandler: ___FILEBASENAMEASIDENTIFIER___StoreFetchOrdersCompletionHandler) -> Void
}

class ___FILEBASENAMEASIDENTIFIER___Worker {
    let store: ___FILEBASENAMEASIDENTIFIER___WorkerStoreProtocol
    
    //MARK: - Object Life Cycle
    
    init(withStore store: ___FILEBASENAMEASIDENTIFIER___WorkerStoreProtocol) {
        self.store = store
    }
    
    // MARK: BUSINESS LOGIC
    
}

// MARK: - ___FILEBASENAMEASIDENTIFIER___ STORE OPERATION RESULTS

// MARK: Completionhandler

//Examples:
//typealias ___FILEBASENAMEASIDENTIFIER___StoreFetchEmojisCompletionHandler = (_ result: ___FILEBASENAMEASIDENTIFIER___StoreResult<[Emoji]>) -> Void
//typealias ___FILEBASENAMEASIDENTIFIER___StoreFetchOrderCompletionHandler = (result: ___FILEBASENAMEASIDENTIFIER___StoreResult<Order>) -> Void
//typealias ___FILEBASENAMEASIDENTIFIER___StoreCreateOrderCompletionHandler = (result: ___FILEBASENAMEASIDENTIFIER___StoreResult<Void>) -> Void
//typealias ___FILEBASENAMEASIDENTIFIER___StoreUpdateOrderCompletionHandler = (result: ___FILEBASENAMEASIDENTIFIER___StoreResult<Void>) -> Void
//typealias ___FILEBASENAMEASIDENTIFIER___StoreDeleteOrderCompletionHandler = (result: ___FILEBASENAMEASIDENTIFIER___StoreResult<Void>) -> Void

// MARK: Results
enum ___FILEBASENAMEASIDENTIFIER___StoreResult<U>
{
    case Success(result: U)
    case Failure(error: EmojiStoreError)
}

// MARK: Errors

enum ___FILEBASENAMEASIDENTIFIER___StoreError: Equatable, Error
{
    case CannotFetch(String)
    case CannotCreate(String)
    case CannotUpdate(String)
    case CannotDelete(String)
}

func ==(lhs: ___FILEBASENAMEASIDENTIFIER___StoreError, rhs: ___FILEBASENAMEASIDENTIFIER___StoreError) -> Bool
{
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
    case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
    case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
    default: return false
    }
}
